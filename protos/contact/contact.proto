syntax = "proto3";

package kritor.contact;

option csharp_namespace = "Kritor.Contact";
option java_multiple_files = true;
option java_package = "io.kritor.contact";
option go_package = "grpc/kritor/contact";

import "contact/contact_data.proto";

service ContactService {
  rpc GetProfileCard(ProfileCardRequest) returns (ProfileCard); // 获取名片（限好友）
  rpc GetStrangerInfo(StrangerInfoRequest) returns (StrangerInfo); // 获取陌生人信息

  rpc GetUid(GetUidRequest) returns (GetUidResponse); // 获取uid
  rpc GetUinByUid(GetUinByUidRequest) returns (GetUinByUidResponse); // 获取uin

  rpc SetProfileCard(SetProfileCardRequest) returns (SetProfileCardResponse); // 设置自己的名片

  rpc IsBlackListUser(IsBlackListUserRequest) returns (IsBlackListUserResponse); // 是否是黑名单用户
  rpc VoteUser(VoteUserRequest) returns (VoteUserResponse); // 点赞好友
}

message ProfileCardRequest {
  oneof account {
    uint64 uin = 1;
    string uid = 2;
  }
}

message StrangerInfoRequest {
  uint64 uin = 1;
}

message GetUidRequest {
  repeated uint64 uins = 1;
}

message GetUidResponse {
  map<uint64, string> uid_map = 1;
}

message GetUinByUidRequest {
  repeated string uids = 1;
}

message GetUinByUidResponse {
  map<string, uint64> uin_map = 1;
}

message SetProfileCardRequest {
  optional string nick_name = 1;
  optional string company = 2;
  optional string email = 3;
  optional string college = 4;
  optional string personal_note = 5;
  optional uint32 birthday = 6;
  optional uint32 age = 7;
}

message SetProfileCardResponse {
}

message IsBlackListUserRequest {
  string uid = 1;
  uint64 uin = 2;
}

message IsBlackListUserResponse {
  bool is_black_list_user = 1;
}

message VoteUserRequest {
  oneof account {
    string uid = 1;
    uint64 uin = 2;
  }
  uint32 vote_count = 3;
}

message VoteUserResponse {
}